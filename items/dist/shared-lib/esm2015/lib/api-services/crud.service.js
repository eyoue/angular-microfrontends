import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { of } from "rxjs";
import * as i0 from "@angular/core";
let CrudService = class CrudService {
    constructor() {
        this._list = [
            { id: 'id-1', name: 'item-1', options: { isItem: true } },
            { id: 'id-2', name: 'item-2', options: { isItem: false } },
            { id: 'id-3', name: 'item-3', options: { isItem: true } }
        ];
    }
    createList(list) {
        this._list = list;
        return of({ status: 200 });
    }
    readList() {
        return of(this._list);
    }
    readListItem(id) {
        let itemShort = this._list.find(item => item.id === id);
        let item = null;
        if (itemShort) {
            item = { id: itemShort.id, name: itemShort.name, date: new Date().toISOString(), description: 'test item: ' + itemShort.name };
        }
        return of(item);
    }
    updateList(list) {
        this._list = list;
        return of(this._list);
    }
    deleteList() {
        this._list = null;
        return of({ status: 200 });
    }
};
CrudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CrudService_Factory() { return new CrudService(); }, token: CrudService, providedIn: "root" });
CrudService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], CrudService);
export { CrudService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J1ZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2hhcmVkLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9hcGktc2VydmljZXMvY3J1ZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYSxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBT3BDLElBQWEsV0FBVyxHQUF4QixNQUFhLFdBQVc7SUFBeEI7UUFFVSxVQUFLLEdBQVc7WUFDbEIsRUFBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyxFQUFDO1lBQ3JELEVBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsRUFBQztZQUN0RCxFQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLEVBQUM7U0FDdEQsQ0FBQztLQXlCUDtJQXZCUSxVQUFVLENBQUMsSUFBWTtRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLEVBQUUsQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFBO0lBQzFCLENBQUM7SUFDTSxRQUFRO1FBQ2IsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7SUFDTSxZQUFZLENBQUMsRUFBVTtRQUM1QixJQUFJLFNBQVMsR0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDOUQsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDO1FBQ3RCLElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxHQUFHLEVBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsV0FBVyxFQUFFLGFBQWEsR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFDLENBQUU7U0FDL0g7UUFDRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNqQixDQUFDO0lBQ00sVUFBVSxDQUFDLElBQVk7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7SUFDTSxVQUFVO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQTtJQUMxQixDQUFDO0NBQ0YsQ0FBQTs7QUEvQlksV0FBVztJQUh2QixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csV0FBVyxDQStCdkI7U0EvQlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2Z9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQge0xpc3R9IGZyb20gXCIuLi9tb2RlbHMvbGlzdC5tb2RlbFwiO1xuaW1wb3J0IHtJdGVtfSBmcm9tIFwiLi4vbW9kZWxzL2l0ZW0ubW9kZWxcIjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ3J1ZFNlcnZpY2Uge1xuXG4gIHByaXZhdGUgX2xpc3Q6IExpc3RbXSA9IFtcbiAgICAgICAge2lkOiAnaWQtMScsIG5hbWU6ICdpdGVtLTEnLCBvcHRpb25zOiB7aXNJdGVtOiB0cnVlfX0sXG4gICAgICAgIHtpZDogJ2lkLTInLCBuYW1lOiAnaXRlbS0yJywgb3B0aW9uczoge2lzSXRlbTogZmFsc2V9fSxcbiAgICAgICAge2lkOiAnaWQtMycsIG5hbWU6ICdpdGVtLTMnLCBvcHRpb25zOiB7aXNJdGVtOiB0cnVlfX1cbiAgICAgIF07XG5cbiAgcHVibGljIGNyZWF0ZUxpc3QobGlzdDogTGlzdFtdKTogT2JzZXJ2YWJsZTx7c3RhdHVzOiBudW1iZXJ9PiB7XG4gICAgdGhpcy5fbGlzdCA9IGxpc3Q7XG4gICAgcmV0dXJuIG9mKHtzdGF0dXM6IDIwMH0pXG4gIH1cbiAgcHVibGljIHJlYWRMaXN0KCk6IE9ic2VydmFibGU8TGlzdFtdPiB7XG4gICAgcmV0dXJuIG9mKHRoaXMuX2xpc3QpXG4gIH1cbiAgcHVibGljIHJlYWRMaXN0SXRlbShpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxJdGVtPiB7XG4gICAgbGV0IGl0ZW1TaG9ydDogTGlzdCA9IHRoaXMuX2xpc3QuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcbiAgICBsZXQgaXRlbTogSXRlbSA9IG51bGw7XG4gICAgaWYgKGl0ZW1TaG9ydCkge1xuICAgICAgaXRlbSA9IHtpZDogaXRlbVNob3J0LmlkLCBuYW1lOiBpdGVtU2hvcnQubmFtZSwgZGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLCBkZXNjcmlwdGlvbjogJ3Rlc3QgaXRlbTogJyArIGl0ZW1TaG9ydC5uYW1lfSA7XG4gICAgfVxuICAgIHJldHVybiBvZihpdGVtKVxuICB9XG4gIHB1YmxpYyB1cGRhdGVMaXN0KGxpc3Q6IExpc3RbXSk6IE9ic2VydmFibGU8TGlzdFtdPiB7XG4gICAgdGhpcy5fbGlzdCA9IGxpc3Q7XG4gICAgcmV0dXJuIG9mKHRoaXMuX2xpc3QpXG4gIH1cbiAgcHVibGljIGRlbGV0ZUxpc3QoKTogT2JzZXJ2YWJsZTx7c3RhdHVzOiBudW1iZXJ9PiB7XG4gICAgdGhpcy5fbGlzdCA9IG51bGw7XG4gICAgcmV0dXJuIG9mKHtzdGF0dXM6IDIwMH0pXG4gIH1cbn1cbiJdfQ==